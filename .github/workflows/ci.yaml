name: CI - Build & Push Docker Image

on:
  push:
    branches:
      - '**'
    paths:
      - 'app/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: "yaswanthmitta"
  IMAGE_NAME: multiapp-todo-app

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd app
          pip install -r requirements.txt
          pip install flake8 bandit safety pytest pytest-cov

      - name: CI Linting üßπ
        run: |
          cd app
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          if [ $? -eq 0 ]; then echo "‚úÖ Linting passed"; else echo "‚ùå Linting failed" && exit 1; fi

      - name: Source Code Analysis üîç
        run: |
          cd app
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          if [ $? -eq 0 ]; then echo "‚úÖ Code analysis passed"; else echo "‚ùå Code analysis failed" && exit 1; fi
      
      - name: Software Component Analysis (SCA) üì¶
        run: |
          cd app
          safety check --json || true
          if [ $? -eq 0 ]; then echo "‚úÖ SCA passed - No known vulnerabilities"; else echo "‚ö†Ô∏è SCA found vulnerabilities but continuing"; fi

      - name: Static Application Security Testing (SAST) üîí
        run: |
          cd app
          bandit -r . -f json || true
          if [ $? -eq 0 ]; then echo "‚úÖ SAST passed - No security issues"; else echo "‚ö†Ô∏è SAST found issues but continuing"; fi

      - name: Build Application üõ†Ô∏è
        run: |
          cd app
          python -m py_compile main.py
          if [ $? -eq 0 ]; then echo "‚úÖ Build successful"; else echo "‚ùå Build failed" && exit 1; fi

      - name: Run Unit Tests ‚úÖ
        run: |
          cd app
          # Test syntax and basic imports without DB connection
          python -c "import sys; sys.path.append('.'); import os; os.environ['MONGO_URI']='mongodb://localhost:27017/'; exec(open('main.py').read().split('mongo_client = init_db()')[0]); print('‚úÖ Application syntax valid')"
          if [ $? -eq 0 ]; then echo "‚úÖ Tests passed"; else echo "‚ùå Tests failed" && exit 1; fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Create Docker Image üê≥
        run: |
          IMAGE_TAG="${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG -f ./app/Dockerfile ./app

      - name: Push Docker Image to Docker Hub üö¢
        run: |
          IMAGE_TAG="${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker push $IMAGE_TAG

      - name: Deploy into some cluster üöÄ
        run: |
          echo "Deploying to a cluster..."

      - name: Update and push deployment manifest
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://github.com/polyglot-microservices-org/todo-service.git
          
          sed -i "s|image: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/deployment.yaml
          
          git add k8s/deployment.yaml
          git diff --staged --quiet || git commit -m "chore: Update image tag to ${{ github.sha }} [skip ci]"
          git push
